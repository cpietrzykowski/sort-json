{"version":3,"sources":["../../src/index.js"],"names":["program","usage","parse","process","argv","sortObjectKeys","value","deep","Object","Array","isArray","keys","sort","l","r","localeCompare","reduce","memo","k","readJsonFile","path","Promise","resolve","reject","readFile","err","data","jsonObject","JSON","reason","writeJsonToFile","obj","json","stringify","writeFile","args","filePath","then","console","info","outputHelp","help"],"mappings":"aAAA,sB,qCACA,oC,kFACA,KAAMA,SAAU,yBAAcC,KAAd,CAAoB,QAApB,EAA8BC,KAA9B,CAAoCC,QAAQC,IAA5C,CAAhB,CAOA,QAASC,eAAT,CAAwBC,KAAxB,CAA+BC,KAAO,KAAtC,CAA6C,CAC3C,GAAIC,OAAOF,KAAP,IAAkBA,KAAtB,CAA6B,CAC3B,GAAI,CAACG,MAAMC,OAAN,CAAcJ,KAAd,CAAL,CAA2B,CACzB,MAAOE,QAAOG,IAAP,CAAYL,KAAZ,EACJM,IADI,CACC,SAASC,CAAT,CAAYC,CAAZ,CAAe,CACnB,MAAOD,GAAEE,aAAF,CAAgBD,CAAhB,CACR,CAHI,EAIJE,MAJI,CAIG,SAASC,IAAT,CAAeC,CAAf,CAAkB,CACxBD,KAAKC,CAAL,EAAUb,eAAeC,MAAMY,CAAN,CAAf,CAAV,CACA,MAAOD,KACR,CAPI,CAOF,EAPE,CAQR,CACF,CAED,MAAOX,MACR,CAOD,QAASa,aAAT,CAAsBC,IAAtB,CAA4B,CAC1B,MAAO,IAAIC,QAAJ,CAAY,SAASC,OAAT,CAAkBC,MAAlB,CAA0B,CAC3C,aAAGC,QAAH,CAAYJ,IAAZ,CAAkB,SAASK,GAAT,CAAcC,IAAd,CAAoB,CACpC,GAAID,GAAJ,CAAS,MAAOF,QAAOE,GAAP,CAAP,CAET,GAAI,CACF,KAAME,YAAaC,KAAK1B,KAAL,CAAWwB,IAAX,CAAnB,CACA,MAAOJ,SAAQK,UAAR,CACR,CAAC,MAAOE,MAAP,CAAe,CACf,MAAON,QAAOM,MAAP,CACR,CACF,CATD,CAUD,CAXM,CAYR,CAQD,QAASC,gBAAT,CAAyBV,IAAzB,CAA+BW,GAA/B,CAAoC,CAClC,KAAMC,MAAOJ,KAAKK,SAAL,CAAeF,GAAf,CAAoB,IAApB,CAA0B,CAA1B,CAAb,CAEA,MAAO,IAAIV,QAAJ,CAAY,SAASC,OAAT,CAAkBC,MAAlB,CAA0B,CAC3C,aAAGW,SAAH,CAAad,IAAb,CAAoB,GAAEY,IAAK,IAA3B,CAAgC,SAASP,GAAT,CAAc,CAC5C,GAAIA,GAAJ,CAAS,MAAOF,QAAOE,GAAP,CAAP,CACT,MAAOH,UACR,CAHD,CAID,CALM,CAMR,CAGD,GAAItB,QAAQmC,IAAR,CAAa,CAAb,CAAJ,CAAqB,CACnB,KAAMC,UAAWpC,QAAQmC,IAAR,CAAa,CAAb,CAAjB,CACAhB,aAAaiB,QAAb,EACGC,IADH,CACQ,SAASN,GAAT,CAAc,CAElB,MAAO1B,gBAAe0B,GAAf,CACR,CAJH,EAKGM,IALH,CAKQ,SAASN,GAAT,CAAc,CAClB,MAAOD,iBAAgBM,QAAhB,CAA0BL,GAA1B,CACR,CAPH,EAQGM,IARH,CAQQ,UAAW,CACfC,QAAQC,IAAR,CAAc,qBAAoBH,QAAS,EAA3C,CACD,CAVH,CAWD,CAbD,IAaO,CACLpC,QAAQwC,UAAR,CAAmB,SAASC,IAAT,CAAe,CAChC,MAAOA,KACR,CAFD,CAGD","file":"index.js","sourcesContent":["import fs from 'fs';\nimport { Command } from 'commander';\nconst program = new Command().usage('<file>').parse(process.argv);\n\n/**\n * @param  {object}        value input\n * @param  {boolean}  deep  true if deep sort\n * @return {object}              a new sorted object or passthrough\n */\nfunction sortObjectKeys(value, deep = false) {\n  if (Object(value) === value) {\n    if (!Array.isArray(value)) {\n      return Object.keys(value)\n        .sort(function(l, r) {\n          return l.localeCompare(r);\n        })\n        .reduce(function(memo, k) {\n          memo[k] = sortObjectKeys(value[k]);\n          return memo;\n        }, {});\n    }\n  }\n\n  return value;\n}\n\n/**\n *\n * @param {string} path\n * @return {Promise} resolving with {string}\n */\nfunction readJsonFile(path) {\n  return new Promise(function(resolve, reject) {\n    fs.readFile(path, function(err, data) {\n      if (err) return reject(err);\n\n      try {\n        const jsonObject = JSON.parse(data);\n        return resolve(jsonObject);\n      } catch (reason) {\n        return reject(reason);\n      }\n    });\n  });\n}\n\n/**\n *\n * @param {string} path\n * @param {object} obj\n * @return {Promise}\n */\nfunction writeJsonToFile(path, obj) {\n  const json = JSON.stringify(obj, null, 2);\n\n  return new Promise(function(resolve, reject) {\n    fs.writeFile(path, `${json}\\n`, function(err) {\n      if (err) return reject(err);\n      return resolve();\n    });\n  });\n}\n\n// command line driver\nif (program.args[0]) {\n  const filePath = program.args[0];\n  readJsonFile(filePath)\n    .then(function(obj) {\n      // process object (sorting keys)\n      return sortObjectKeys(obj);\n    })\n    .then(function(obj) {\n      return writeJsonToFile(filePath, obj);\n    })\n    .then(function() {\n      console.info(`finished sorting: ${filePath}`);\n    });\n} else {\n  program.outputHelp(function(help) {\n    return help;\n  });\n}\n"]}